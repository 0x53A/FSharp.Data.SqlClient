(*** hide ***)
#r @"..\..\src\SqlClient\bin\Debug\FSharp.Data.SqlClient.dll"
#r "System.Transactions"
open FSharp.Data

[<Literal>]
let connectionString = @"Data Source=.;Initial Catalog=AdventureWorks2014;Integrated Security=True"
    
(**
FAQ
===================
### 1. How do I specify default value for a parameter?

`SqlCommandProvider` generates parameters for all unbound T-SQL script variables. 
By definition those variables don't have default value. 
One workaround is to assume NULL as default value (see next item).
The other option is to have default value logic in application code.

If you feel strongly about having default parameter values defined in T-SQL 
consider wrapping it into stored procedure or function. Both accept default values for parameters. 
`SqlProgrammabilityProvider` supports this scenario by mapping it to .NET method parameters with default values.

### 2. How do I pass NULL as parameter value?

By default SqlCommandProvider treat all parameters as mandatory. 
*)

let echoOnly = new SqlCommandProvider<"SELECT ISNULL(@x, 42)", connectionString, SingleRow = true>()
echoOnly.Execute( x = (* must pass int value here *) 1) 

(**
There is no way to pass NULL as value for parameter `@x` although the query knows how to handle it.

To resolve the issue specify `AllParametersOptional = true` as static parameter to type provider. 
It makes all parameters of type `option<_>` with default value `None`. 

<div class="well well-small" style="margin:0px 70px 0px 20px;">

**Note** This is not same as F# optional parameters** but mimics them closely.
Unfortunately type providers in general restricted to emit .NET 1.1 types only. 
No generics, no F# specific types/annotations which includes optional parameters.

</p></div>

*)

let echoOr42 = 
    new SqlCommandProvider<"
        SELECT ISNULL(@x, 42)
    ", connectionString, SingleRow = true, AllParametersOptional = true>()

// Pass parameter value. Specifying Some constructor is mandatrory.
echoOr42.Execute( Some 1) 

// Pass NULL by omitting parameter
echoOr42.Execute() 

//Pass NULL explicitly
echoOr42.Execute( x = None) 

(**
### 3. How do I do dynamic filter?  

Dynamic filters is when your T-SQL command accepts multiple input arguments and is supposed 
to determine which columns to filter, if at all, based on that input.

Following command allows to filter dynamically information on sales people based on country and minimal sales amount.
*)

(**
### 4. Why do I get compile time error " ... The undeclared parameter '@p1' is used more than once in the batch being analyzed."?  
*)

(**
### 5. Exposing types generated by SqlCommandProvider  
*)

